import socket
import os

MONITOR_HOST = 'localhost'
MONITOR_PORT = 6000
DOWNLOAD_FOLDER = 'downloaded_files'
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

# ID -> (host, port)


def get_active_peer_map():
    """
    Tr·∫£ v·ªÅ dict: { "1": (ip, port), "2": (ip, port), ... }
    D·ª±a v√†o port c·ªßa peer (5001 ‚Üí peer1 = ID 1)
    """
    active = {}
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect((MONITOR_HOST, MONITOR_PORT))
            s.sendall(b"GET_ACTIVE_PEERS")
            data = s.recv(4096).decode().strip()
            lines = data.split('\n')
            for line in lines:
                ip, port = line.split(':')
                port = int(port)
                peer_id = str(port - 5000)  # 5001 ‚Üí 1
                active[peer_id] = (ip, port)
    except Exception as e:
        print("‚ö†Ô∏è L·ªói khi k·∫øt n·ªëi monitor:", e)
    return active


peer_map = {}


def get_active_peers():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((MONITOR_HOST, MONITOR_PORT))
        s.sendall(b"GET_ACTIVE_PEERS")
        data = s.recv(4096).decode()
        lines = data.strip().split('\n')
        return [tuple(line.split(':')) for line in lines]


def get_files_from_peer(ip, port):
    port = int(port)
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(2.0)
            s.connect((ip, port))
            s.sendall(b"LIST_FILES")
            files = s.recv(4096).decode().strip().split('\n')
            return files
    except:
        return []


def download_file_from_peer(peer_id, filename, peer_map):
    if peer_id not in peer_map:
        print("‚ùå ID peer kh√¥ng h·ª£p l·ªá.")
        return
    ip, port = peer_map[peer_id]
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect((ip, port))
            s.sendall(f"DOWNLOAD {filename}".encode())
            response = s.recv(4096)
            if response == b"FILE_NOT_FOUND":
                print("‚ùå File kh√¥ng t·ªìn t·∫°i tr√™n peer.")
            else:
                with open(os.path.join(DOWNLOAD_FOLDER, filename), 'wb') as f:
                    f.write(response)
                print(f"‚úÖ ƒê√£ t·∫£i file v·ªÅ: {DOWNLOAD_FOLDER}/{filename}")
    except Exception as e:
        print("‚ùå L·ªói khi t·∫£i file:", e)


def upload_file_to_peer(peer_id, filepath, peer_map):
    if peer_id not in peer_map:
        print("‚ùå ID peer kh√¥ng h·ª£p l·ªá.")
        return
    ip, port = peer_map[peer_id]
    if not os.path.exists(filepath):
        print("‚ùå File kh√¥ng t·ªìn t·∫°i.")
        return
    filename = os.path.basename(filepath)
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect((ip, port))
            s.sendall(f"UPLOAD {filename}".encode())
            ack = s.recv(1024)
            if ack != b"READY":
                print("‚ùå Peer kh√¥ng s·∫µn s√†ng nh·∫≠n file.")
                return
            with open(filepath, 'rb') as f:
                data = f.read()
            s.sendall(data)
            print(f"‚úÖ ƒê√£ upload {filename} l√™n peer {peer_id}")
    except Exception as e:
        print("‚ùå L·ªói khi upload file:", e)


def menu():
    while True:
        print("\nüìã MENU:")
        print("1. Xem c√°c peer ƒëang ho·∫°t ƒë·ªông v√† danh s√°ch file")
        print("2. T·∫£i file t·ª´ peer (theo ID)")
        print("3. G·ª≠i file l√™n peer (theo ID)")
        print("0. Tho√°t")
        choice = input("üëâ Ch·ªçn ch·ª©c nƒÉng: ").strip()

        peer_map = get_active_peer_map()  # l·∫•y l·∫°i danh s√°ch m·ªõi m·ªói v√≤ng l·∫∑p

        if choice == '1':
            if not peer_map:
                print("‚ö†Ô∏è Kh√¥ng c√≥ peer n√†o ƒëang ho·∫°t ƒë·ªông.")
            else:
                for peer_id, (ip, port) in peer_map.items():
                    print(f"\nüîó Peer{peer_id} ({ip}:{port}) [Ho·∫°t ƒë·ªông]")
                    files = get_files_from_peer(ip, port)
                    if files:
                        for f in files:
                            print(f"   - {f}")
                    else:
                        print("   (tr·ªëng)")
        elif choice == '2':
            if not peer_map:
                print("‚ö†Ô∏è Kh√¥ng c√≥ peer n√†o ƒë·ªÉ t·∫£i file.")
                continue
            peer_id = input("Nh·∫≠p ID c·ªßa peer (1‚Äì3): ").strip()
            filename = input("T√™n file c·∫ßn t·∫£i: ").strip()
            if peer_id in peer_map:
                ip, port = peer_map[peer_id]
                download_file_from_peer(peer_id, filename, peer_map)
            else:
                print("‚ùå Peer kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c ID sai.")
        elif choice == '3':
            if not peer_map:
                print("‚ö†Ô∏è Kh√¥ng c√≥ peer n√†o ƒë·ªÉ upload.")
                continue
            peer_id = input("Nh·∫≠p ID c·ªßa peer (1‚Äì3): ").strip()
            filepath = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n file c·∫ßn g·ª≠i: ").strip()
            if peer_id in peer_map:
                ip, port = peer_map[peer_id]
                upload_file_to_peer(peer_id, filepath, peer_map)
            else:
                print("‚ùå Peer kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c ID sai.")
        elif choice == '0':
            break
        else:
            print("‚ùó L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")


if __name__ == "__main__":
    menu()
